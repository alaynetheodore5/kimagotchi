{"version":3,"sources":["Components/Tamagotchi.jsx","App.js","serviceWorker.js","index.js"],"names":["DisplayTamagotchi","props","fullness","happiness","meals","energy","message","image","className","src","alt","Tamagotchi","useState","setFullness","setHappiness","setMeals","setEnergy","setMessage","setImage","getRandomNum","Math","floor","random","randomLiked","checkWin","onClick","energyRemaining","chance","mealsRemaining","feedChance","feedLiked","playchance","playliked","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c594e5d2.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst DisplayTamagotchi = props => {\n    const {fullness, happiness, meals, energy, message, image} = props;\n\n    return (\n        <div className=\"display\">\n            <div className=\"row\">\n                <div className=\"col my-5\">\n                    <h1>Kim's Stats:</h1>\n                    <h5>Fullness: {props.fullness}</h5>\n                    <h5>Happiness: {props.happiness}</h5>\n                    <h5>Energy: {props.energy}</h5>\n                    <h5>Meals: {props.meals}</h5>\n                    <h1>{props.message}</h1>\n                </div>\n                <div className=\"col my-5\">\n                    <img src={props.image} alt=\"\"/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst Tamagotchi = props => {\n\n    const [fullness, setFullness] = useState(20);\n    const [happiness, setHappiness] = useState(20);\n    const [meals, setMeals] = useState(3);\n    const [energy, setEnergy] = useState(50);\n    const [message, setMessage] = useState(\"Welcome to my site! You'll have to do everything for me.  -xoxo Kim \");\n    const [image, setImage] = useState(\"Images/KimKHello.gif\");\n\n    function work() {\n        var energyRemaining = energy;\n        var chance = randomMeals()*1\n        if(energyRemaining >= 5) {\n            setMeals(meals + chance)\n            setMessage(\"Kim worked hard for the money!\");\n            setEnergy(energy - 5);\n            setImage(\"Images/KimKWork.gif\");\n        }\n        else {\n            setMessage(\"Kim is too exhausted to go to work.\");\n            setMeals(meals);\n            setImage(\"Images/KimKTired.gif\");\n        }\n        checkWin();\n    }\n\n    function play() {\n        var energyRemaining = energy;\n        var playchance = getRandomNum() *1;\n        var playliked = randomLiked() *1;\n        if(energyRemaining >= 5) {\n            if(playliked === 1) {\n                setEnergy(energy - 5);\n                setHappiness(happiness + playchance);\n                setMessage(\"That made Kim happy!\");\n                setImage(\"Images/KimKHappy.gif\");\n            }\n            else {\n                setEnergy(energy - 5);\n                setMessage(\"Kim didnt want to play with you right now\");\n                setHappiness(happiness);\n                setImage(\"Images/KimKSad.gif\");\n            }\n        }\n        else {\n            setMessage(\"Kim is literally too tired.\");\n            setHappiness(happiness);\n            setImage(\"Images/KimKTooTired.gif\");\n        }\n        checkWin();\n    }\n\n    function feed() {\n        var mealsRemaining = meals;\n        var feedChance = getRandomNum() *1;\n        var feedLiked = randomLiked() *1;\n        if(mealsRemaining >=1) {\n            if(feedLiked === 1) {\n                setMeals(meals - 1);\n                setFullness(fullness + feedChance);\n                setMessage(\"TG that food was just barely up to Kim's standards.\");\n                setImage(\"Images/KimKEating.gif\");\n\n            }\n            else {\n                setMeals(meals - 1);\n                setMessage(\"Kim will not eat your gross food.\");\n                setImage(\"Images/KimKNotEating.gif\");\n                setFullness(fullness);\n            }\n        }\n        else {\n            setMessage(\"You are literally starving, Kim.\");\n            setImage(\"Images/KimKHungry.gif\");\n            setFullness(fullness);\n        }\n        checkWin();\n    }\n\n    function sleep() {\n        setHappiness(happiness - 5);\n        setFullness(fullness - 5);\n        setEnergy(energy + 15);\n        setMessage(\"Kim literally needed that nap.\");\n        setImage(\"Images/KimKNap.gif\");\n        checkWin();\n    }\n\n    function getRandomNum() {\n        var min = 5;\n        var max = 10;\n        var random = Math.floor(Math.random() * (+max +1 - + min)) + +min;\n        return random;\n    }\n\n    function randomMeals() {\n        var min = 1;\n        var max = 3;\n        var random = Math.floor(Math.random() * (+max +1 - + min)) + +min;\n        return random;\n    }\n    \n    function randomLiked() {\n        var min = 1;\n        var max = 4;\n        var random = Math.floor(Math.random() * (+max +1 - + min)) + +min;\n        return random;\n    }\n\n    function checkWin() {\n        if((energy >= 100) || (fullness >= 100) || (happiness >= 100)) {\n            setMessage(\"you won!\");\n            //disables buttonshow reset button\n            setImage(\"Images/KimKWin.gif\");\n        }\n        else {\n            if((fullness <= 0) || (happiness <= 0)) {\n                setMessage(\"you lose!\");\n                setImage(\"Images/KimKSad.gif\");\n            }\n        }\n    }\n\n    function reset() {\n        setHappiness(20);\n        setFullness(20);\n        setEnergy(50);\n        setMeals(3);\n        setMessage(\"Welcome to my site! You'll have to do everything for me.  -xoxo Kim \");\n        setImage(\"Images/KimKHello.gif\");\n    }\n\n    return (\n        <div className=\"dashboard\">\n            <DisplayTamagotchi \n                fullness={fullness}\n                happiness={happiness}\n                energy={energy}\n                meals={meals}\n                message={message}\n                image={image}\n            />\n            {\n                message === \"you won!\" || message === \"you lose!\" ? \n                <div>\n                    <button className=\"btn btn-dark\" onClick = {reset} >Reset</button>\n                </div> : \n                <div>\n                    <button className=\"btn btn-dark\" onClick = {work} >Work</button>\n                    <button className=\"btn btn-dark\" onClick = {sleep} >Sleep</button>\n                    <button className=\"btn btn-dark\" onClick = {feed} >Eat</button>\n                    <button className=\"btn btn-dark\" onClick = {play} >Play</button>\n                </div>\n            }\n        </div>\n    )\n\n}\n\nexport default Tamagotchi;","import React from 'react';\nimport './App.css';\nimport Tamagotchi from './Components/Tamagotchi';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"dashboard\">\n        <Tamagotchi />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}